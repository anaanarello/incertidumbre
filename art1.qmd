---
title: "Artículo 1: Redes bayesianas multinomiales"
author: "Ana Ana Rello de Obeso, Getzemani Kinari Ríos Tavares, David Esteban Flores Medina"
format:
   html:
     toc: true
     html-math-method: katex
     embed-resources: true
     self-contained-math: true
     df-print: kable
editor: visual
---

## Abstract

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Introducción

En 2017 el INEGI realizó la Encuesta Origen Destino en Hogares de la Zona Metropolitana del Valle de México (EOD), la cual nos es de ayuda para entender y analizar la estadística sobre la movilidad de habitantes de la zona con el fin de tener mejores políticas en temas de planificación urbana.

## Metodología

Para poder realizar las queries sobre la encuesta de movilidad, se tuvo que considerar la siguiente **teoría de redes bayesianas**:\
Una red bayesiana es un grafo acíclico dirigido (DAG) en el que los nodos representan variables aleatorias y los arcos representan dependencias condicionales entre ellas. Gracias a esta estructura, la distribución conjunta de las variables se puede factorizar, por ejemplo: $$
  \mathbb{P}(A, B, C) = \mathbb{P}(A \mid C, B)\mathbb{P}(A)\mathbb{P}(B)
$$ Es por ello que trabajaremos con las siguientes librerías:

-   `bnlearn` es la librería principal para trabajar con la teoría bayesiana en R ya que permite definir estructuras de DAGs, aprender la estructura de la red a partir de datos, ajustar parámetros y hacer inferencia probabilística.

-   `readr` es una librería de tidyverse especializada en leer y escribir datos de forma rápida y eficiente, por lo que los datos de la encuesta de movilidad son más faciles de importar por medio de esta librería.

```{r}
#| eval: false

library(bnlearn)
library(readr)
```

Y para graficar estas estructuras manejaremos `Rgraphviz`, que es la librería que `bnlearn` usa por defecto para dibujar los DAGs.

```{r}
#| eval: false
install.packages("BiocManager")
BiocManager::install("Rgraphviz")
```

Aunque los arcos pueden interpretarse intuitivamente como causa–efecto, en este trabajo se consideran únicamente como relaciones de dependencia estadística. La red permite expresar la distribución global de todas las variables en términos de distribuciones locales más simples, lo que reduce la complejidad y hace el modelo más manejable. Además, la teoría de redes bayesianas ayuda a identificar qué variables son independientes entre sí, dado un conjunto de condiciones.

Estas independencias simplifican los cálculos de probabilidad. Cada nodo requiere probabilidades (simples o condicionales) que pueden estimarse de los datos mediante máxima verosimilitud o asignarse mediante priors en un enfoque bayesiano, obteniendo así un modelo probabilístico estructurado a partir de la información observada. En este sentido, la teoría de redes bayesianas resulta especialmente útil para responder queries sobre la encuesta de movilidad, ya que permite representar las relaciones entre variables sociodemográficas y de transporte, calcular probabilidades a partir de la factorización e independencia condicional y manejar escenarios con datos incompletos o combinaciones nuevas de variables.

## Aplicación

### Query 1

Para la primera query, vimos que el dataset más relevante era viajes, ya que la probabilidad a calcular se basaba en lo siguiente: *¿Cuál es la probabilidad de tener autos o camionetas con holograma 00 ó 0, dado que se tiene un estrato alto o medio alto?*

```{r}
query1 = read.csv("~/Desktop/semestre 5/semestre 5/repositorio/data/query1.csv", stringsAsFactors = TRUE)
head(query1)
```

```{r}
query1_limpio = na.omit(query1)
```

```{r}
dag1 = empty.graph(nodes = c("E", "T", "H"))
arc_set1 = matrix(c("E", "T", 
                    "T", "H"), 
                 byrow = TRUE, ncol = 2,
                 dimnames = list(NULL, c("from", "to")))
arcs(dag1) = arc_set1
dag1
```

```{r}
bn1 = bn.fit(dag1, data = query1_limpio)
```

```{r}
# puede haber posible error si el string contiene valor numerico y valor mal escrito por falta de mayusculas o minusculas 
cpquery(dag1, event = (E == "4"), evidence = ((T == "1") & ((H == "1") | (H == "2"))), n = 10^6)
```

## Conclusiones

## Referencias